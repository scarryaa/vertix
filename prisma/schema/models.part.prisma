model User {
    id                     Int                 @id @default(autoincrement())
    role                   UserRole            @default(USER)
    created_at             DateTime            @default(now())
    updated_at             DateTime            @updatedAt
    username               String              @unique
    email                  String              @unique
    password               String
    name                   String
    avatar                 String?
    bio                    String?
    public_email           String?
    verified_email         Boolean             @default(false)
    languages              Language[]          @default([ENGLISH])
    perferred_languages    Language[]          @default([ENGLISH])
    programming_languages  ProgrammingLanguage[]
    timezone               Timezone?           @default(EST)
    status                 UserStatus          @default(ACTIVE)
    last_login_at          DateTime?
    deleted_at             DateTime?
    reset_password_token   String?
    reset_password_expires DateTime?
    two_factor_enabled     Boolean             @default(false)
    phone                  String?
    location               String?
    website                String?
    deleted                Boolean             @default(false)

    assigned_issues        IssueAssignee[]
    social_logins          SocialLogin[]
    repositories           Repository[]        @relation("UserRepositories")
    user_preferences       UserPreferences?
    followers              Follow[]            @relation("UserFollowers")
    following              Follow[]            @relation("UserFollowing")
    issues                 Issue[]             @relation("IssueAuthor")
    stars                  Star[]
    collaborators          Collaborator[]
    comments               Comment[]           @relation("CommentAuthor")
    notifications          Notification[]      @relation("UserNotifications")
    memberships            Member[]
    pull_requests          PullRequest[]       @relation("PullRequestAssignees")
    pull_request_authors   PullRequest[]       @relation("PullRequestAuthor")
    commits                Commit[]            @relation("CommitAuthor")
    reviews                Review[]            @relation("ReviewAuthor")

    @@index([username, public_email])
}

model SocialLogin {
    id          Int    @id @default(autoincrement())
    provider    String
    provider_id Int
    user        User   @relation(fields: [user_id], references: [id])
    user_id     Int
}

model UserPreferences {
    id                Int     @id @default(autoincrement())
    user              User?   @relation(fields: [user_id], references: [id])
    user_id           Int?    @unique
    theme             String  @default("system")
    show_public_email Boolean @default(false)
}

model Follow {
    id           Int      @id @default(autoincrement())
    follower     User     @relation("UserFollowers", fields: [follower_id], references: [id], onDelete: Cascade)
    follower_id  Int
    following    User     @relation("UserFollowing", fields: [following_id], references: [id], onDelete: Cascade)
    following_id Int
    created_at   DateTime @default(now())
    updated_at   DateTime @updatedAt

    @@unique([follower_id, following_id])
}

model Repository {
    id                    Int                 @id @default(autoincrement())
    name                  String
    description           String?
    visibility            String
    created_at            DateTime            @default(now())
    updated_at            DateTime            @updatedAt
    owner                 User                @relation("UserRepositories", fields: [owner_id], references: [id])
    owner_id              Int
    issues                Issue[]             @relation("RepositoryIssues")
    stars                 Star[]
    programming_languages ProgrammingLanguage[]
    collaborators         Collaborator[]
    license               License?            @relation(fields: [license_id], references: [id])
    license_id            Int?
    tag                   Tag?                @relation(fields: [tag_id], references: [id])
    tag_id                Int?
    organization          Organization?       @relation(fields: [organization_id], references: [id])
    organization_id       Int?
    pull_requests         PullRequest[]

    @@index([created_at])
}

model License {
    id           Int          @id @default(autoincrement())
    name         String
    key          String       @unique
    repositories Repository[]
}

model Collaborator {
    id            Int        @id @default(autoincrement())
    repository    Repository @relation(fields: [repository_id], references: [id])
    repository_id Int
    user          User       @relation(fields: [user_id], references: [id])
    user_id       Int

    @@unique([repository_id, user_id])
}

model PullRequest {
    id                     Int                 @id @default(autoincrement())
    title                  String
    description            String?
    status                 PullRequestStatus   @default(OPEN)
    created_at             DateTime            @default(now())
    updated_at             DateTime            @updatedAt
    repository             Repository          @relation(fields: [repository_id], references: [id])
    repository_id          Int
    author                 User                @relation("PullRequestAuthor", fields: [author_id], references: [id])
    author_id              Int
    pull_request_assignees User[]              @relation("PullRequestAssignees")
    comments               Comment[]
    commits                Commit[]
    reviews                Review[]
    head_branch            String
    base_branch            String
    merged_at              DateTime?
    closed_at              DateTime?
}

model Comment {
    id              Int          @id @default(autoincrement())
    body            String
    created_at      DateTime     @default(now())
    updated_at      DateTime     @updatedAt
    pull_request    PullRequest? @relation(fields: [pull_request_id], references: [id])
    pull_request_id Int?
    author          User         @relation("CommentAuthor", fields: [author_id], references: [id])
    author_id       Int
    issue           Issue?       @relation(fields: [issue_id], references: [id], onDelete: Cascade)
    issue_id        Int?
    deleted_user    Boolean      @default(false)
}

model Commit {
    id              Int         @id @default(autoincrement())
    sha             String      @unique
    message         String
    created_at      DateTime    @default(now())
    pull_request    PullRequest @relation(fields: [pull_request_id], references: [id])
    pull_request_id Int
    author          User        @relation("CommitAuthor", fields: [author_id], references: [id])
    author_id       Int
}

model Issue {
    id            Int             @id @default(autoincrement())
    title         String
    body          String
    status        String
    created_at    DateTime        @default(now())
    updated_at    DateTime        @updatedAt
    repository    Repository      @relation("RepositoryIssues", fields: [repository_id], references: [id], onDelete: Cascade)
    repository_id Int
    author        User            @relation("IssueAuthor", fields: [author_id], references: [id])
    author_id     Int
    comments      Comment[]
    assignees     IssueAssignee[]
}

model Star {
    id            Int        @id @default(autoincrement())
    created_at    DateTime   @default(now())
    updated_at    DateTime   @updatedAt
    repository    Repository @relation(fields: [repository_id], references: [id])
    repository_id Int
    user          User       @relation(fields: [user_id], references: [id])
    user_id       Int

    @@unique([repository_id, user_id])
}

model Tag {
    id           Int          @id @default(autoincrement())
    name         String
    repositories Repository[]
}

model Notification {
    id         Int      @id @default(autoincrement())
    user       User     @relation("UserNotifications", fields: [user_id], references: [id], onDelete: Cascade)
    user_id    Int
    type       NotificationType
    data       Json
    read       Boolean  @default(false)
    created_at DateTime @default(now())
}

model Organization {
    id           Int          @id @default(autoincrement())
    name         String
    description  String?
    created_at   DateTime     @default(now())
    updated_at   DateTime     @updatedAt
    members      Member[]
    repositories Repository[]
}

model Member {
    id              Int          @id @default(autoincrement())
    organization    Organization @relation(fields: [organization_id], references: [id])
    organization_id Int
    user            User         @relation(fields: [user_id], references: [id])
    user_id         Int
    role            OrganizationMemberRole

    @@unique([organization_id, user_id])
}

model Review {
    id              Int         @id @default(autoincrement())
    body            String
    created_at      DateTime    @default(now())
    updated_at      DateTime    @updatedAt
    pull_request    PullRequest @relation(fields: [pull_request_id], references: [id], onDelete: Cascade)
    pull_request_id Int
    author          User        @relation("ReviewAuthor", fields: [author_id], references: [id])
    author_id       Int
}

model IssueAssignee {
    issue    Issue @relation(fields: [issue_id], references: [id])
    issue_id Int
    user     User  @relation(fields: [user_id], references: [id])
    user_id  Int

    @@id([issue_id, user_id])
}