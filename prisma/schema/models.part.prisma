model User {
    id                     String                @id @default(uuid())
    role                   UserRole              @default(USER)
    created_at             DateTime              @default(now())
    updated_at             DateTime              @updatedAt
    username               String                @unique
    email                  String                @unique
    password               String
    name                   String
    avatar                 String?
    bio                    String?
    public_email           String?
    verified_email         Boolean               @default(false)
    languages              Language[]            @default([ENGLISH])
    perferred_languages    Language[]            @default([ENGLISH])
    programming_languages  ProgrammingLanguage[]
    timezone               Timezone?             @default(EST)
    status                 UserStatus            @default(ACTIVE)
    last_login_at          DateTime?
    deleted_at             DateTime?
    reset_password_token   String?
    reset_password_expires DateTime?
    two_factor_enabled     Boolean               @default(false)
    phone                  String?
    location               String?
    website                String?
    deleted                Boolean               @default(false)

    assigned_issues      IssueAssignee[]
    social_logins        SocialLogin[]
    repositories         Repository[]     @relation("UserRepositories")
    user_preferences     UserPreferences?
    followers            Follow[]         @relation("UserFollowers")
    following            Follow[]         @relation("UserFollowing")
    issues               Issue[]          @relation("IssueAuthor")
    stars                Star[]
    collaborators        Collaborator[]
    comments             Comment[]        @relation("CommentAuthor")
    notifications        Notification[]   @relation("UserNotifications")
    memberships          Member[]
    pull_requests        PullRequest[]    @relation("PullRequestAssignees")
    pull_request_authors PullRequest[]    @relation("PullRequestAuthor")
    commits              Commit[]         @relation("CommitAuthor")
    reviews              Review[]         @relation("ReviewAuthor")

    @@index([username, public_email])
}

model SocialLogin {
    id          String @id @default(uuid())
    provider    String
    provider_id String
    user        User   @relation(fields: [user_id], references: [id])
    user_id     String
}

model UserPreferences {
    id                String  @id @default(uuid())
    user              User?   @relation(fields: [user_id], references: [id])
    user_id           String? @unique
    theme             String  @default("system")
    show_public_email Boolean @default(false)
}

model Follow {
    id           String   @id @default(uuid())
    follower     User     @relation("UserFollowers", fields: [follower_id], references: [id], onDelete: Cascade)
    follower_id  String
    following    User     @relation("UserFollowing", fields: [following_id], references: [id], onDelete: Cascade)
    following_id String
    created_at   DateTime @default(now())
    updated_at   DateTime @updatedAt

    @@unique([follower_id, following_id])
}

model Repository {
    id                    String                @id @default(uuid())
    name                  String
    description           String?
    visibility            String
    created_at            DateTime              @default(now())
    updated_at            DateTime              @updatedAt
    owner                 User                  @relation("UserRepositories", fields: [owner_id], references: [id])
    owner_id              String
    issues                Issue[]               @relation("RepositoryIssues")
    stars                 Star[]
    programming_languages ProgrammingLanguage[]
    collaborators         Collaborator[]
    license               License?              @relation(fields: [license_id], references: [id])
    license_id            String?
    tag                   Tag?                  @relation(fields: [tag_id], references: [id])
    tag_id                String?
    organization          Organization?         @relation(fields: [organization_id], references: [id])
    organization_id       String?
    pull_requests         PullRequest[]

    @@index([created_at])
}

model License {
    id           String       @id @default(uuid())
    name         String
    key          String       @unique
    repositories Repository[]
}

model Collaborator {
    id            String     @id @default(uuid())
    repository    Repository @relation(fields: [repository_id], references: [id])
    repository_id String
    user          User       @relation(fields: [user_id], references: [id])
    user_id       String

    @@unique([repository_id, user_id])
}

model PullRequest {
    id                     String            @id @default(uuid())
    title                  String
    description            String?
    status                 PullRequestStatus @default(OPEN)
    created_at             DateTime          @default(now())
    updated_at             DateTime          @updatedAt
    repository             Repository        @relation(fields: [repository_id], references: [id])
    repository_id          String
    author                 User              @relation("PullRequestAuthor", fields: [author_id], references: [id])
    author_id              String
    pull_request_assignees User[]            @relation("PullRequestAssignees")
    comments               Comment[]
    commits                Commit[]
    reviews                Review[]
    head_branch            String
    base_branch            String
    merged_at              DateTime?
    closed_at              DateTime?
}

model Comment {
    id              String       @id @default(uuid())
    body            String
    created_at      DateTime     @default(now())
    updated_at      DateTime     @updatedAt
    pull_request    PullRequest? @relation(fields: [pull_request_id], references: [id])
    pull_request_id String?
    author          User         @relation("CommentAuthor", fields: [author_id], references: [id])
    author_id       String
    issue           Issue?       @relation(fields: [issue_id], references: [id], onDelete: Cascade)
    issue_id        String?
    deleted_user    Boolean      @default(false)
}

model Commit {
    id              String      @id @default(uuid())
    sha             String      @unique
    message         String
    created_at      DateTime    @default(now())
    pull_request    PullRequest @relation(fields: [pull_request_id], references: [id])
    pull_request_id String
    author          User        @relation("CommitAuthor", fields: [author_id], references: [id])
    author_id       String
}

model Issue {
    id            String          @id @default(uuid())
    title         String
    body          String
    status        String
    created_at    DateTime        @default(now())
    updated_at    DateTime        @updatedAt
    repository    Repository      @relation("RepositoryIssues", fields: [repository_id], references: [id], onDelete: Cascade)
    repository_id String
    author        User            @relation("IssueAuthor", fields: [author_id], references: [id])
    author_id     String
    comments      Comment[]
    assignees     IssueAssignee[]
}

model Star {
    id            String     @id @default(uuid())
    created_at    DateTime   @default(now())
    updated_at    DateTime   @updatedAt
    repository    Repository @relation(fields: [repository_id], references: [id])
    repository_id String
    user          User       @relation(fields: [user_id], references: [id])
    user_id       String

    @@unique([repository_id, user_id])
}

model Tag {
    id           String       @id @default(uuid())
    name         String
    repositories Repository[]
}

model Notification {
    id         String           @id @default(uuid())
    user       User             @relation("UserNotifications", fields: [user_id], references: [id], onDelete: Cascade)
    user_id    String
    type       NotificationType
    data       Json
    read       Boolean          @default(false)
    created_at DateTime         @default(now())
}

model Organization {
    id           String       @id @default(uuid())
    name         String
    description  String?
    created_at   DateTime     @default(now())
    updated_at   DateTime     @updatedAt
    members      Member[]
    repositories Repository[]
}

model Member {
    id              String                 @id @default(uuid())
    organization    Organization           @relation(fields: [organization_id], references: [id])
    organization_id String
    user            User                   @relation(fields: [user_id], references: [id])
    user_id         String
    role            OrganizationMemberRole

    @@unique([organization_id, user_id])
}

model Review {
    id              String      @id @default(uuid())
    body            String
    created_at      DateTime    @default(now())
    updated_at      DateTime    @updatedAt
    pull_request    PullRequest @relation(fields: [pull_request_id], references: [id], onDelete: Cascade)
    pull_request_id String
    author          User        @relation("ReviewAuthor", fields: [author_id], references: [id])
    author_id       String
}

model IssueAssignee {
    issue    Issue  @relation(fields: [issue_id], references: [id])
    issue_id String
    user     User   @relation(fields: [user_id], references: [id])
    user_id  String

    @@id([issue_id, user_id])
}
