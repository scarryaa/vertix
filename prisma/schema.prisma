generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model representing users of the website
model User {
  role      String   @default("USER") @map("USER|ADMIN|MODERATOR")
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  name      String
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  repositories         Repository[]
  followersRelation    Follow[]        @relation("UserFollowers")
  followingRelation    Follow[]        @relation("UserFollowing")
  issuesAuthored       Issue[]         @relation("IssueAuthor")
  stars                Star[]          @relation("UserStars")
  password             String
  publicEmail          String?
  preferences          UserPreference?
  userPreferenceId     Int?
  collaboratorRelation Collaborator[]  @relation("UserCollaborator")
  commentsAuthored     Comment[]       @relation("CommentAuthor")
  notifications        Notification[]  @relation("UserNotifications")
  memberships          Member[]        @relation("UserMemberships")
  pullRequestsAssigned PullRequest[]   @relation("PullRequestAssignees")
  pullRequestsAuthored PullRequest[]   @relation("PullRequestAuthor")
  commitsAuthored      Commit[]        @relation("CommitAuthor")
  pullRequestAssigned  PullRequest?    @relation(fields: [pullRequestId], references: [id])
  pullRequestId        Int?
}

// Intermediate models and relations
model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
}

model Repository {
  id              Int            @id @default(autoincrement())
  name            String
  description     String?
  visibility      String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  owner           User           @relation(fields: [ownerId], references: [id])
  ownerId         Int
  issues          Issue[]        @relation("RepositoryIssues")
  stars           Star[]         @relation("RepositoryStars")
  language        String?
  collaboratorRel Collaborator[] @relation("RepositoryCollaborator")
  license         License?       @relation(fields: [licenseId], references: [id])
  licenseId       Int?
  tag             Tag?           @relation(fields: [tagId], references: [id])
  tagId           Int?
  organization    Organization?  @relation(fields: [organizationId], references: [id])
  organizationId  Int?
  pullRequests    PullRequest[]  @relation("RepositoryPullRequests")
}

model Collaborator {
  id           Int        @id @default(autoincrement())
  repository   Repository @relation("RepositoryCollaborator", fields: [repositoryId], references: [id])
  repositoryId Int
  user         User       @relation("UserCollaborator", fields: [userId], references: [id])
  userId       Int

  @@unique([repositoryId, userId])
}

model PullRequest {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  status       String     @default("OPEN")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  repository   Repository @relation("RepositoryPullRequests", fields: [repositoryId], references: [id])
  repositoryId Int
  author       User       @relation("PullRequestAuthor", fields: [authorId], references: [id])
  authorId     Int
  assignees    User[]     @relation("PullRequestAssignees")
  comments     Comment[]  @relation("PullRequestComments")
  commits      Commit[]   @relation("PullRequestCommits")
  headBranch   String
  baseBranch   String
  mergedAt     DateTime?
  closedAt     DateTime?
  User         User[]
}

model Comment {
  id            Int         @id @default(autoincrement())
  body          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pullRequest   PullRequest @relation("PullRequestComments", fields: [pullRequestId], references: [id])
  pullRequestId Int
  author        User        @relation("CommentAuthor", fields: [authorId], references: [id])
  authorId      Int
  issue         Issue?      @relation("IssueComments", fields: [issueId], references: [id])
  issueId       Int?
}

model Commit {
  id            Int         @id @default(autoincrement())
  sha           String      @unique
  message       String
  createdAt     DateTime    @default(now())
  pullRequest   PullRequest @relation("PullRequestCommits", fields: [pullRequestId], references: [id])
  pullRequestId Int
  author        User        @relation("CommitAuthor", fields: [authorId], references: [id])
  authorId      Int
}

// Issue model representing issues in repositories
model Issue {
  id           Int        @id @default(autoincrement())
  title        String
  body         String?
  status       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  repository   Repository @relation("RepositoryIssues", fields: [repositoryId], references: [id])
  repositoryId Int
  author       User       @relation("IssueAuthor", fields: [authorId], references: [id])
  authorId     Int
  comments     Comment[]  @relation("IssueComments")
}

// Star model representing stars (likes) on repositories
model Star {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  repository   Repository @relation("RepositoryStars", fields: [repositoryId], references: [id])
  repositoryId Int
  user         User       @relation("UserStars", fields: [userId], references: [id])
  userId       Int

  @@unique([repositoryId, userId])
}

// Other models
model Tag {
  id           Int          @id @default(autoincrement())
  name         String
  repositories Repository[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  userId    Int
  type      String
  data      Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Organization {
  id           Int          @id @default(autoincrement())
  name         String
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  members      Member[]     @relation("OrganizationMembers")
  repositories Repository[]
}

model Member {
  id             Int          @id @default(autoincrement())
  organization   Organization @relation("OrganizationMembers", fields: [organizationId], references: [id])
  organizationId Int
  user           User         @relation("UserMemberships", fields: [userId], references: [id])
  userId         Int
  role           String

  @@unique([organizationId, userId])
}

model UserPreference {
  id              Int     @id @default(autoincrement())
  user            User?   @relation(fields: [userId], references: [id])
  userId          Int     @unique
  theme           String  @default("system")
  showPublicEmail Boolean @default(false)
}

model License {
  id           Int          @id @default(autoincrement())
  name         String
  key          String       @unique
  repositories Repository[]
}
